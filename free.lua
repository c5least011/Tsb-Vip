local key_url = "https://raw.githubusercontent.com/c5least011/Tsb-Vip/refs/heads/main/key"

local p = game.Players.LocalPlayer
local running = false

local function getKey()
    local success, res = pcall(function()
        return game:HttpGet(key_url)
    end)
    return success and res:match("^%s*(.-)%s*$") or nil
end

local function getRandomPlayer()
    local players = {}
    for _, v in pairs(game.Players:GetPlayers()) do
        if v ~= p and v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
            table.insert(players, v)
        end
    end
    return #players > 0 and players[math.random(1, #players)] or nil
end

local function followPlayers()
    running = true
    while running do
        local target = getRandomPlayer()
        if not target then task.wait(1) continue end

        repeat  
            if not running then return end  
            if target.Character and target.Character:FindFirstChild("HumanoidRootPart") and p.Character then  
                p.Character:WaitForChild("HumanoidRootPart").CFrame = target.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 3)  
            else  
                break  
            end  
            task.wait(0.001)  
        until not target.Character or not target.Character.Parent  
    end
end

local function followDummy()
    running = true
    local d repeat d = game.Workspace.Live:FindFirstChild("Weakest Dummy") task.wait() until d
    local t = d:WaitForChild("Torso")

    while running and d and d.Parent and t and t.Parent do  
        p.Character.HumanoidRootPart.CFrame = t.CFrame * CFrame.new(0, 0, 3)  
        task.wait(0.001)  
    end  

    d.AncestryChanged:Connect(function()  
        if not running then return end  
        repeat task.wait() until game.Workspace.Live:FindFirstChild("Weakest Dummy")  
        d = game.Workspace.Live:FindFirstChild("Weakest Dummy")  
        if d then t = d:WaitForChild("Torso") followDummy() end  
    end)
end

-- Tạo GUI
local gui = Instance.new("ScreenGui", game.CoreGui)

local frame = Instance.new("Frame", gui)
frame.Size = UDim2.new(0, 200, 0, 150)
frame.Position = UDim2.new(0.5, -100, 0.5, -75)
frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
frame.Active = true
frame.Draggable = true
frame.Visible = false

local title = Instance.new("TextLabel", frame)
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
title.Font = Enum.Font.SourceSansBold
title.Text = "C5_TSB"
title.TextColor3 = Color3.fromRGB(255, 255, 255)
title.TextSize = 20

local playersBtn = Instance.new("TextButton", frame)
playersBtn.Size = UDim2.new(0, 180, 0, 30)
playersBtn.Position = UDim2.new(0, 10, 0, 40)
playersBtn.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
playersBtn.Font = Enum.Font.SourceSansBold
playersBtn.Text = "Players"
playersBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
playersBtn.TextSize = 18

local dummyBtn = Instance.new("TextButton", frame)
dummyBtn.Size = UDim2.new(0, 180, 0, 30)
dummyBtn.Position = UDim2.new(0, 10, 0, 80)
dummyBtn.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
dummyBtn.Font = Enum.Font.SourceSansBold
dummyBtn.Text = "Dummy"
dummyBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
dummyBtn.TextSize = 18

local stopBtn = Instance.new("TextButton", frame)
stopBtn.Size = UDim2.new(0, 180, 0, 30)
stopBtn.Position = UDim2.new(0, 10, 0, 120)
stopBtn.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
stopBtn.Font = Enum.Font.SourceSansBold
stopBtn.Text = "Stop"
stopBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
stopBtn.TextSize = 18

playersBtn.MouseButton1Click:Connect(function()
    running = false
    task.wait(0.2)
    task.spawn(followPlayers)
end)

dummyBtn.MouseButton1Click:Connect(function()
    running = false
    task.wait(0.2)
    task.spawn(followDummy)
end)

stopBtn.MouseButton1Click:Connect(function()
    running = false
end)

-- Key System
local keySystem = Instance.new("Frame", gui)
keySystem.Size = UDim2.new(0, 200, 0, 120)
keySystem.Position = UDim2.new(0.5, -100, 0.5, -60)
keySystem.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
keySystem.Visible = true

local keyTitle = Instance.new("TextLabel", keySystem)
keyTitle.Size = UDim2.new(1, 0, 0, 30)
keyTitle.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
keyTitle.Font = Enum.Font.SourceSansBold
keyTitle.Text = "Nhập Key"
keyTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
keyTitle.TextSize = 20

local keyInput = Instance.new("TextBox", keySystem)
keyInput.Size = UDim2.new(0, 180, 0, 30)
keyInput.Position = UDim2.new(0, 10, 0, 40)
keyInput.BackgroundColor3 = Color3.fromRGB(100, 100, 100)
keyInput.Font = Enum.Font.SourceSans
keyInput.PlaceholderText = "Nhập key..."
keyInput.Text = ""
keyInput.TextColor3 = Color3.fromRGB(255, 255, 255)
keyInput.TextSize = 18

local keyCheck = Instance.new("TextButton", keySystem)
keyCheck.Size = UDim2.new(0, 85, 0, 30)
keyCheck.Position = UDim2.new(0, 10, 0, 80)
keyCheck.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
keyCheck.Font = Enum.Font.SourceSansBold
keyCheck.Text = "Check Key"
keyCheck.TextColor3 = Color3.fromRGB(255, 255, 255)
keyCheck.TextSize = 18

local keyDiscord = Instance.new("TextButton", keySystem)
keyDiscord.Size = UDim2.new(0, 85, 0, 30)
keyDiscord.Position = UDim2.new(0, 105, 0, 80)
keyDiscord.BackgroundColor3 = Color3.fromRGB(0, 0, 255)
keyDiscord.Font = Enum.Font.SourceSansBold
keyDiscord.Text = "Key ở Dis"
keyDiscord.TextColor3 = Color3.fromRGB(255, 255, 255)
keyDiscord.TextSize = 18

keyCheck.MouseButton1Click:Connect(function()
    local correctKey = getKey()
    if correctKey and keyInput.Text == correctKey then
        keySystem.Visible = false
        frame.Visible = true
    else
        keyTitle.Text = "Key sai!"
        task.wait(1)
        keyTitle.Text = "Nhập Key"
    end
end)

keyDiscord.MouseButton1Click:Connect(function()
    keyTitle.Text = "Lấy key ở Discord!"
    task.wait(1)
    keyTitle.Text = "Nhập Key"
end)